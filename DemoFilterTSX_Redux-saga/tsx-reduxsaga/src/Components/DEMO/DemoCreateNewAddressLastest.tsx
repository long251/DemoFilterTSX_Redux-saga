import {
  Button,
  Form,
  Frame,
  Layout,
  LegacyCard,
  LegacyStack,
  Modal,
  Page,
  Tabs,
  TextContainer,
} from '@shopify/polaris';
import { divide, set } from 'lodash';
import React, { useCallback, useEffect, useState } from 'react';
import './demo.scss';
function DemoCreateNewAddressLastest(props: any) {
  const [selected, setSelected] = useState(0);
  const handleTabChange = useCallback(
    (selectedTabIndex: number) => setSelected(selectedTabIndex),
    [],
  );
  const tabs = [
    {
      id: '1',
      content: 'Thông tin cá nhân', //tên cột
    },
    {
      id: '2',
      content: 'Sổ địa chỉ',
    },
    {
      id: '3',
      content: 'Tài khoản ngân hàng',
    },
    {
      id: '4',
      content: 'Thông báo',
    },
  ];
  // fake data Sổ địa chỉ
  const [addresses, setAddresses] = useState([
    {id:1,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 66, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội, Hà Nội',
      addressType: 'OFFICE',
      statusAddress: 'mặc định',
    },
    {id:2,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 77, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội',
      addressType: 'HOME',
      statusAddress: '',
    },
    {id: 3,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 88, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội',
      addressType: 'OFFICE',
      statusAddress: '',
    },
    {id:4,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 99, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội',
      addressType: 'OFFICE',
      statusAddress: '',
    },
    {id:5,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 22, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội',
      addressType: 'OFFICE',
      statusAddress: '',
    },
    {id:6,
      fullName: 'Nguyễn Tuấn Minh',
      phone: '0943123123',
      email: '',
      address: 'Tầng 11, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội',
      addressType: 'HOME',
      statusAddress: '',
    },
  ]);
  const handleDeleteAddress = (index: number) => {
    const newAddresses = [...addresses];
    newAddresses.splice(index, 1);
    setAddresses(newAddresses);
  };
  const handleChooseDefaultAddress = (index: any) => {
    const updatedAddresses = addresses.map((address, i) => ({
      ...address,
      statusAddress: i === index ? 'mặc định' : '',
    }));
    setAddresses(updatedAddresses);
  };
  //xử lý khi chọn checkbox và nhấn create
  const [defaultAddressIndex, setDefaultAddressIndex] = useState(-1);
  const [isDefault, setIsDefault] = useState(false);

  const ButtonCreateNewAdd = () => (
    <svg
      width="155"
      height="40"
      viewBox="0 0 155 40"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect width="155" height="40" rx="4" fill="#0050A6" />
      <path
        d="M26 30C20.4837 30 16 25.5163 16 20C16 14.4837 20.4837 10 26 10C31.5163 10 36 14.4837 36 20C36 25.5163 31.5163 30 26 30ZM26 11.3953C21.2558 11.3953 17.3953 15.2558 17.3953 20C17.3953 24.7442 21.2558 28.6047 26 28.6047C30.7442 28.6047 34.6047 24.7442 34.6047 20C34.6047 15.2558 30.7442 11.3953 26 11.3953Z"
        fill="white"
      />
      <path
        d="M29.7211 20.6977H22.2792C21.8978 20.6977 21.5815 20.3814 21.5815 20C21.5815 19.6186 21.8978 19.3023 22.2792 19.3023H29.7211C30.1025 19.3023 30.4188 19.6186 30.4188 20C30.4188 20.3814 30.1025 20.6977 29.7211 20.6977Z"
        fill="white"
      />
      <path
        d="M25.9999 24.4186C25.6185 24.4186 25.3022 24.1023 25.3022 23.7209V16.2791C25.3022 15.8977 25.6185 15.5814 25.9999 15.5814C26.3813 15.5814 26.6976 15.8977 26.6976 16.2791V23.7209C26.6976 24.1023 26.3813 24.4186 25.9999 24.4186Z"
        fill="white"
      />
      <path
        d="M47.1719 16.1133H44.3691V14.9785H51.1641V16.1133H48.3613V25H47.1719V16.1133ZM53.2832 24.918C52.8639 24.7083 52.5449 24.4258 52.3262 24.0703C52.1074 23.7148 51.998 23.3047 51.998 22.8398C51.998 22.0833 52.2806 21.4954 52.8457 21.0762C53.429 20.6478 54.1491 20.4336 55.0059 20.4336C55.4525 20.4336 55.8535 20.4792 56.209 20.5703C56.5736 20.6615 56.8516 20.7708 57.043 20.8984V20.4609C57.043 19.9414 56.8607 19.5176 56.4961 19.1895C56.1315 18.8613 55.6576 18.6973 55.0742 18.6973C54.6823 18.6973 54.3177 18.7839 53.9805 18.957C53.625 19.1393 53.3561 19.3809 53.1738 19.6816L52.2715 19.0117C52.5449 18.5924 52.9323 18.2552 53.4336 18C53.9258 17.7539 54.4727 17.6309 55.0742 17.6309C56.0404 17.6309 56.8014 17.8861 57.3574 18.3965C57.9043 18.8978 58.1777 19.5905 58.1777 20.4746V25H57.043V23.9746H56.9883C56.7786 24.3301 56.4733 24.6263 56.0723 24.8633C55.6803 25.1003 55.2155 25.2188 54.6777 25.2188C54.1491 25.2188 53.6842 25.1185 53.2832 24.918ZM55.9219 23.8652C56.2682 23.6556 56.5417 23.3822 56.7422 23.0449C56.9427 22.7077 57.043 22.3294 57.043 21.9102C56.8242 21.7643 56.5508 21.6413 56.2227 21.541C55.9128 21.4499 55.5664 21.4043 55.1836 21.4043C54.5273 21.4043 54.0352 21.541 53.707 21.8145C53.3789 22.0879 53.2148 22.4342 53.2148 22.8535C53.2148 23.2454 53.3652 23.5645 53.666 23.8105C53.9668 24.0566 54.3451 24.1797 54.8008 24.1797C55.2018 24.1797 55.5755 24.0749 55.9219 23.8652ZM54.623 27.4609C54.4772 27.3151 54.4043 27.1374 54.4043 26.9277C54.4043 26.709 54.4772 26.5312 54.623 26.3945C54.778 26.2578 54.9557 26.1895 55.1562 26.1895C55.375 26.1895 55.5527 26.2578 55.6895 26.3945C55.8353 26.5404 55.9082 26.7181 55.9082 26.9277C55.9082 27.1191 55.8353 27.2969 55.6895 27.4609C55.5527 27.6159 55.375 27.6934 55.1562 27.6934C54.9557 27.6934 54.778 27.6159 54.623 27.4609ZM61.2266 24.7266C60.6706 24.3893 60.2331 23.929 59.9141 23.3457C59.6042 22.7806 59.4492 22.1426 59.4492 21.4316C59.4492 20.7207 59.6042 20.0827 59.9141 19.5176C60.2331 18.9342 60.6706 18.474 61.2266 18.1367C61.7826 17.7995 62.4115 17.6309 63.1133 17.6309C63.8151 17.6309 64.444 17.7995 65 18.1367C65.556 18.474 65.9935 18.9342 66.3125 19.5176C66.6224 20.0827 66.7773 20.7207 66.7773 21.4316C66.7773 22.1426 66.6224 22.7806 66.3125 23.3457C65.9935 23.929 65.556 24.3893 65 24.7266C64.4622 25.0547 63.8333 25.2188 63.1133 25.2188C62.3932 25.2188 61.7643 25.0547 61.2266 24.7266ZM64.3438 23.8105C64.7083 23.6009 65.0091 23.2865 65.2461 22.8672C65.474 22.4661 65.5879 21.9876 65.5879 21.4316C65.5879 20.8665 65.474 20.3835 65.2461 19.9824C65.0091 19.5632 64.7083 19.2487 64.3438 19.0391C63.9609 18.8203 63.5508 18.7109 63.1133 18.7109C62.6758 18.7109 62.2656 18.8203 61.8828 19.0391C61.5091 19.2578 61.2038 19.5723 60.9668 19.9824C60.7389 20.3835 60.625 20.8665 60.625 21.4316C60.625 21.9876 60.7389 22.4661 60.9668 22.8672C61.2038 23.2773 61.5091 23.5918 61.8828 23.8105C62.2839 24.0384 62.694 24.1523 63.1133 24.1523C63.5326 24.1523 63.9427 24.0384 64.3438 23.8105ZM78.959 16.8379H78.0703V25H76.9355V23.9473H76.8809C76.6712 24.2936 76.3431 24.5944 75.8965 24.8496C75.4681 25.0957 74.985 25.2188 74.4473 25.2188C73.7819 25.2188 73.1986 25.0592 72.6973 24.7402C72.1868 24.4212 71.7812 23.9701 71.4805 23.3867C71.1797 22.8125 71.0293 22.1608 71.0293 21.4316C71.0293 20.7116 71.1797 20.0645 71.4805 19.4902C71.7904 18.8978 72.196 18.4421 72.6973 18.123C73.2168 17.7949 73.8001 17.6309 74.4473 17.6309C74.9759 17.6309 75.459 17.7585 75.8965 18.0137C76.3431 18.278 76.6712 18.5833 76.8809 18.9297H76.9355L76.8809 17.9727V16.8379H74.7207V15.8945H76.8809V14.9785H78.0703V15.8945H78.959V16.8379ZM75.7324 23.8105C76.097 23.5918 76.3887 23.2728 76.6074 22.8535C76.8262 22.4434 76.9355 21.9694 76.9355 21.4316C76.9355 20.8848 76.8262 20.4062 76.6074 19.9961C76.3887 19.5951 76.097 19.2806 75.7324 19.0527C75.3587 18.8249 74.9714 18.7109 74.5703 18.7109C74.1784 18.7109 73.791 18.8249 73.4082 19.0527C73.0527 19.2624 72.7611 19.5814 72.5332 20.0098C72.3145 20.4199 72.2051 20.8939 72.2051 21.4316C72.2051 21.9694 72.3145 22.4434 72.5332 22.8535C72.7611 23.2819 73.0527 23.6009 73.4082 23.8105C73.791 24.0384 74.1784 24.1523 74.5703 24.1523C74.9714 24.1523 75.3587 24.0384 75.7324 23.8105ZM80.5312 16.5508C80.3034 16.5508 80.1029 16.4642 79.9297 16.291C79.7565 16.1178 79.6699 15.9173 79.6699 15.6895C79.6699 15.4525 79.7565 15.2474 79.9297 15.0742C80.0846 14.9193 80.2852 14.8418 80.5312 14.8418C80.7773 14.8418 80.9779 14.9193 81.1328 15.0742C81.2969 15.2383 81.3789 15.4434 81.3789 15.6895C81.3789 15.9264 81.2969 16.127 81.1328 16.291C80.9596 16.4642 80.7591 16.5508 80.5312 16.5508ZM79.9434 17.8633H81.1328V25H79.9434V17.8633ZM80.5312 27.6934C80.3307 27.6934 80.153 27.6159 79.998 27.4609C79.8431 27.306 79.7656 27.1283 79.7656 26.9277C79.7656 26.709 79.8431 26.5312 79.998 26.3945C80.153 26.2578 80.3307 26.1895 80.5312 26.1895C80.75 26.1895 80.9277 26.2578 81.0645 26.3945C81.2012 26.5312 81.2695 26.709 81.2695 26.9277C81.2695 27.1374 81.2012 27.3151 81.0645 27.4609C80.9277 27.6159 80.75 27.6934 80.5312 27.6934ZM83.8672 24.918C83.4479 24.7083 83.1289 24.4258 82.9102 24.0703C82.6914 23.7148 82.582 23.3047 82.582 22.8398C82.582 22.0833 82.8646 21.4954 83.4297 21.0762C84.013 20.6478 84.7331 20.4336 85.5898 20.4336C86.0365 20.4336 86.4375 20.4792 86.793 20.5703C87.1576 20.6615 87.4355 20.7708 87.627 20.8984V20.4609C87.627 19.9414 87.4447 19.5176 87.0801 19.1895C86.7155 18.8613 86.2415 18.6973 85.6582 18.6973C85.2663 18.6973 84.9017 18.7839 84.5645 18.957C84.209 19.1393 83.9401 19.3809 83.7578 19.6816L82.8555 19.0117C83.1289 18.5924 83.5163 18.2552 84.0176 18C84.5098 17.7539 85.0566 17.6309 85.6582 17.6309C86.6243 17.6309 87.3854 17.8861 87.9414 18.3965C88.4883 18.8978 88.7617 19.5905 88.7617 20.4746V25H87.627V23.9746H87.5723C87.3626 24.3301 87.0573 24.6263 86.6562 24.8633C86.2643 25.1003 85.7995 25.2188 85.2617 25.2188C84.7331 25.2188 84.2682 25.1185 83.8672 24.918ZM86.5059 23.8652C86.8522 23.6556 87.1257 23.3822 87.3262 23.0449C87.5267 22.7077 87.627 22.3294 87.627 21.9102C87.4082 21.7643 87.1348 21.6413 86.8066 21.541C86.4967 21.4499 86.1504 21.4043 85.7676 21.4043C85.1113 21.4043 84.6191 21.541 84.291 21.8145C83.9629 22.0879 83.7988 22.4342 83.7988 22.8535C83.7988 23.2454 83.9492 23.5645 84.25 23.8105C84.5508 24.0566 84.929 24.1797 85.3848 24.1797C85.7858 24.1797 86.1595 24.0749 86.5059 23.8652ZM95.0234 24.7266C94.4857 24.3984 94.0573 23.9473 93.7383 23.373C93.4284 22.8079 93.2734 22.1608 93.2734 21.4316C93.2734 20.7025 93.4284 20.0553 93.7383 19.4902C94.0664 18.8978 94.4948 18.4421 95.0234 18.123C95.5703 17.7949 96.1901 17.6309 96.8828 17.6309C97.6393 17.6309 98.291 17.8132 98.8379 18.1777C99.3665 18.5332 99.7402 19.0117 99.959 19.6133L98.8789 20.0645C98.6966 19.6087 98.4368 19.2715 98.0996 19.0527C97.7533 18.8249 97.3294 18.7109 96.8281 18.7109C96.4089 18.7109 96.0169 18.8249 95.6523 19.0527C95.2878 19.2806 94.9961 19.5996 94.7773 20.0098C94.5586 20.4199 94.4492 20.8939 94.4492 21.4316C94.4492 21.9603 94.5586 22.4297 94.7773 22.8398C94.9961 23.25 95.2878 23.569 95.6523 23.7969C96.026 24.0339 96.418 24.1523 96.8281 24.1523C97.3203 24.1523 97.7533 24.0339 98.127 23.7969C98.4915 23.569 98.765 23.2363 98.9473 22.7988L100 23.25C99.7539 23.8333 99.3665 24.3073 98.8379 24.6719C98.3092 25.0365 97.6576 25.2188 96.8828 25.2188C96.1901 25.2188 95.5703 25.0547 95.0234 24.7266ZM101.299 14.9785H102.488V17.9316L102.42 18.916H102.488C102.671 18.5605 102.98 18.2552 103.418 18C103.837 17.7539 104.302 17.6309 104.812 17.6309C105.678 17.6309 106.339 17.8861 106.795 18.3965C107.251 18.9069 107.479 19.5814 107.479 20.4199V25H106.289V20.5977C106.289 19.9596 106.125 19.4857 105.797 19.1758C105.478 18.8659 105.054 18.7109 104.525 18.7109C104.17 18.7109 103.828 18.8249 103.5 19.0527C103.19 19.2715 102.944 19.5586 102.762 19.9141C102.579 20.2786 102.488 20.6478 102.488 21.0215V25H101.299V14.9785ZM109.297 17.8633H110.486V25H109.297V17.8633ZM109.324 16.2227C109.607 16.1406 109.812 16.0449 109.939 15.9355C110.067 15.8262 110.131 15.6803 110.131 15.498C110.131 15.3431 110.076 15.2155 109.967 15.1152C109.867 15.0241 109.712 14.9785 109.502 14.9785C109.247 14.9785 108.992 15.0332 108.736 15.1426L108.49 14.3906C108.846 14.2357 109.219 14.1582 109.611 14.1582C110.076 14.1582 110.432 14.2676 110.678 14.4863C110.933 14.7142 111.061 15.0332 111.061 15.4434C111.061 15.8809 110.924 16.2227 110.65 16.4688C110.359 16.7331 109.985 16.8971 109.529 16.9609L109.324 16.2227ZM115.6 17.8633H116.721V18.916H116.789C116.99 18.5514 117.295 18.2461 117.705 18C118.115 17.7539 118.548 17.6309 119.004 17.6309C119.514 17.6309 119.97 17.7585 120.371 18.0137C120.763 18.2689 121.041 18.6061 121.205 19.0254C121.451 18.6061 121.784 18.2689 122.203 18.0137C122.632 17.7585 123.115 17.6309 123.652 17.6309C124.482 17.6309 125.102 17.8815 125.512 18.3828C125.931 18.9023 126.141 19.5814 126.141 20.4199V25H124.965V20.5977C124.965 19.9414 124.828 19.4629 124.555 19.1621C124.281 18.8613 123.88 18.7109 123.352 18.7109C122.996 18.7109 122.673 18.8158 122.381 19.0254C122.089 19.235 121.861 19.5085 121.697 19.8457C121.542 20.1647 121.465 20.5384 121.465 20.9668V25H120.275V20.6113C120.275 19.946 120.139 19.4629 119.865 19.1621C119.592 18.8613 119.195 18.7109 118.676 18.7109C118.32 18.7109 117.997 18.8158 117.705 19.0254C117.413 19.235 117.186 19.5176 117.021 19.873C116.867 20.2103 116.789 20.584 116.789 20.9941V25H115.6V17.8633ZM129.258 24.7266C128.702 24.3893 128.264 23.929 127.945 23.3457C127.635 22.7806 127.48 22.1426 127.48 21.4316C127.48 20.7207 127.635 20.0827 127.945 19.5176C128.264 18.9342 128.702 18.474 129.258 18.1367C129.814 17.7995 130.443 17.6309 131.145 17.6309C131.382 17.6309 131.746 17.6719 132.238 17.7539C132.676 17.8268 133.008 17.8633 133.236 17.8633C133.528 17.8633 133.742 17.8177 133.879 17.7266C133.997 17.6445 134.057 17.5033 134.057 17.3027V16.3457H135.014V17.3027C135.014 17.7129 134.923 18.0456 134.74 18.3008C134.558 18.5469 134.289 18.6699 133.934 18.6699C133.833 18.6699 133.738 18.6562 133.646 18.6289V18.6836C134.421 19.3672 134.809 20.2832 134.809 21.4316C134.809 22.1426 134.654 22.7806 134.344 23.3457C134.025 23.929 133.587 24.3893 133.031 24.7266C132.493 25.0547 131.865 25.2188 131.145 25.2188C130.424 25.2188 129.796 25.0547 129.258 24.7266ZM132.375 23.8105C132.74 23.6009 133.04 23.2865 133.277 22.8672C133.505 22.4661 133.619 21.9876 133.619 21.4316C133.619 20.8665 133.505 20.3835 133.277 19.9824C133.04 19.5632 132.74 19.2487 132.375 19.0391C131.992 18.8203 131.582 18.7109 131.145 18.7109C130.707 18.7109 130.297 18.8203 129.914 19.0391C129.54 19.2578 129.235 19.5723 128.998 19.9824C128.77 20.3835 128.656 20.8665 128.656 21.4316C128.656 21.9876 128.77 22.4661 128.998 22.8672C129.235 23.2773 129.54 23.5918 129.914 23.8105C130.315 24.0384 130.725 24.1523 131.145 24.1523C131.564 24.1523 131.974 24.0384 132.375 23.8105ZM131.363 14.6914H132.662L131.664 16.4688H130.625L131.363 14.6914ZM136.9 16.5508C136.673 16.5508 136.472 16.4642 136.299 16.291C136.126 16.1178 136.039 15.9173 136.039 15.6895C136.039 15.4525 136.126 15.2474 136.299 15.0742C136.454 14.9193 136.654 14.8418 136.9 14.8418C137.146 14.8418 137.347 14.9193 137.502 15.0742C137.666 15.2383 137.748 15.4434 137.748 15.6895C137.748 15.9264 137.666 16.127 137.502 16.291C137.329 16.4642 137.128 16.5508 136.9 16.5508ZM136.312 17.8633H137.502V25H136.312V17.8633Z"
        fill="white"
      />
    </svg>
  );
  const IconEditAddress = () => (
    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="32" height="32" rx="8" fill="#DFE3E9" />
      <path
        d="M14.1187 24H23M16.7465 10.0549C16.7465 10.0549 16.7465 11.5079 18.1632 12.9609C19.5798 14.4139 20.9965 14.4139 20.9965 14.4139M11.1437 21.3227L14.1187 20.8868C14.5478 20.824 14.9455 20.62 15.252 20.3056L22.4132 12.9609C23.1956 12.1584 23.1956 10.8573 22.4132 10.0549L20.9965 8.60185C20.2141 7.79938 18.9456 7.79938 18.1632 8.60185L11.002 15.9466C10.6955 16.261 10.4966 16.6689 10.4353 17.109L10.0103 20.1603C9.91589 20.8384 10.4826 21.4196 11.1437 21.3227Z"
        stroke="#4D5B72"
        stroke-width="1.5"
        stroke-linecap="round"
      />
    </svg>
  );
  const IconTrashAddress = () => (
    <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="32" height="32" rx="8" fill="#DFE3E9" />
      <path
        d="M10.5556 12.8V20.8C10.5556 22.5673 11.9484 24 13.6667 24H18.3333C20.0516 24 21.4444 22.5673 21.4444 20.8V12.8M17.5556 15.2V20M14.4444 15.2L14.4444 20M19.1111 10.4L18.0173 8.71248C17.7288 8.26736 17.2432 8 16.723 8H15.277C14.7568 8 14.2712 8.26736 13.9827 8.71248L12.8889 10.4M19.1111 10.4H12.8889M19.1111 10.4H23M12.8889 10.4H9"
        stroke="#4D5B72"
        stroke-width="1.5"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
    </svg>
  );
  const ButtonStatusDefault = () => (
    <svg width="74" height="20" viewBox="0 0 74 20" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="74" height="20" rx="4" fill="#EAF0F7" />
      <path
        d="M14 15.25C12.6076 15.25 11.2723 14.6969 10.2877 13.7123C9.30312 12.7277 8.75 11.3924 8.75 10C8.75 8.60761 9.30312 7.27226 10.2877 6.28769C11.2723 5.30312 12.6076 4.75 14 4.75C15.3924 4.75 16.7277 5.30312 17.7123 6.28769C18.6969 7.27226 19.25 8.60761 19.25 10C19.25 11.3924 18.6969 12.7277 17.7123 13.7123C16.7277 14.6969 15.3924 15.25 14 15.25ZM14 16C15.5913 16 17.1174 15.3679 18.2426 14.2426C19.3679 13.1174 20 11.5913 20 10C20 8.4087 19.3679 6.88258 18.2426 5.75736C17.1174 4.63214 15.5913 4 14 4C12.4087 4 10.8826 4.63214 9.75736 5.75736C8.63214 6.88258 8 8.4087 8 10C8 11.5913 8.63214 13.1174 9.75736 14.2426C10.8826 15.3679 12.4087 16 14 16Z"
        fill="#0050A6"
      />
      <path
        d="M16.2275 7.7275C16.2222 7.73267 16.2172 7.73819 16.2125 7.744L13.6078 11.0627L12.038 9.49225C11.9314 9.39289 11.7903 9.33879 11.6446 9.34137C11.4989 9.34394 11.3599 9.40297 11.2568 9.50603C11.1537 9.60909 11.0947 9.74813 11.0921 9.89386C11.0896 10.0396 11.1436 10.1806 11.243 10.2872L13.2275 12.2725C13.281 12.3259 13.3446 12.3679 13.4147 12.3961C13.4848 12.4244 13.5598 12.4382 13.6353 12.4368C13.7108 12.4354 13.7853 12.4188 13.8543 12.388C13.9233 12.3572 13.9853 12.3128 14.0368 12.2575L17.0308 8.515C17.1327 8.40799 17.1884 8.26517 17.1859 8.1174C17.1834 7.96963 17.1228 7.82878 17.0173 7.72532C16.9118 7.62185 16.7698 7.56408 16.622 7.56449C16.4742 7.56489 16.3325 7.62345 16.2275 7.7275Z"
        fill="#0050A6"
      />
      <path
        d="M24.8008 6.3418H26.0312L28.3066 12.2109H28.3457L30.6309 6.3418H31.8613V13.5H31.0215V8.94922L31.0605 7.5918H31.0215L28.6777 13.5H27.9844L25.6406 7.5918H25.6016L25.6406 8.94922V13.5H24.8008V6.3418ZM33.9121 13.4414C33.6126 13.2917 33.3848 13.0898 33.2285 12.8359C33.0723 12.582 32.9941 12.2891 32.9941 11.957C32.9941 11.4167 33.196 10.9967 33.5996 10.6973C34.0163 10.3913 34.5306 10.2383 35.1426 10.2383C35.4616 10.2383 35.748 10.2708 36.002 10.3359C36.2624 10.401 36.4609 10.4792 36.5977 10.5703V10.2578C36.5977 9.88672 36.4674 9.58398 36.207 9.34961C35.9466 9.11523 35.6081 8.99805 35.1914 8.99805C34.9115 8.99805 34.651 9.0599 34.4102 9.18359C34.1562 9.3138 33.9642 9.48633 33.834 9.70117L33.1895 9.22266C33.3848 8.92318 33.6615 8.68229 34.0195 8.5C34.3711 8.32422 34.7617 8.23633 35.1914 8.23633C35.8815 8.23633 36.4251 8.41862 36.8223 8.7832C37.2129 9.14128 37.4082 9.63607 37.4082 10.2676V13.5H36.5977V12.7676H36.5586C36.4089 13.0215 36.1908 13.2331 35.9043 13.4023C35.6243 13.5716 35.2923 13.6562 34.9082 13.6562C34.5306 13.6562 34.1986 13.5846 33.9121 13.4414ZM35.7969 12.6895C36.0443 12.5397 36.2396 12.3444 36.3828 12.1035C36.526 11.8626 36.5977 11.5924 36.5977 11.293C36.4414 11.1888 36.2461 11.1009 36.0117 11.0293C35.7904 10.9642 35.543 10.9316 35.2695 10.9316C34.8008 10.9316 34.4492 11.0293 34.2148 11.2246C33.9805 11.4199 33.8633 11.6673 33.8633 11.9668C33.8633 12.2467 33.9707 12.4746 34.1855 12.6504C34.4004 12.8262 34.6706 12.9141 34.9961 12.9141C35.2826 12.9141 35.5495 12.8392 35.7969 12.6895ZM34.8691 15.2578C34.765 15.1536 34.7129 15.0267 34.7129 14.877C34.7129 14.7207 34.765 14.5938 34.8691 14.4961C34.9798 14.3984 35.1068 14.3496 35.25 14.3496C35.4062 14.3496 35.5332 14.3984 35.6309 14.4961C35.735 14.6003 35.7871 14.7272 35.7871 14.877C35.7871 15.0137 35.735 15.1406 35.6309 15.2578C35.5332 15.3685 35.4062 15.4238 35.25 15.4238C35.1068 15.4238 34.9798 15.3685 34.8691 15.2578ZM34.625 7.26953C34.4427 7.17188 34.2865 7.01888 34.1562 6.81055C34.0326 6.61523 33.9707 6.40365 33.9707 6.17578H34.6641C34.6641 6.35156 34.7161 6.49479 34.8203 6.60547C34.931 6.72917 35.0742 6.79102 35.25 6.79102C35.4128 6.79102 35.5495 6.72917 35.6602 6.60547C35.7708 6.48177 35.8262 6.33854 35.8262 6.17578H36.5C36.5 6.41016 36.4414 6.62174 36.3242 6.81055C36.194 7.01888 36.041 7.17188 35.8652 7.26953C35.6764 7.3737 35.4714 7.42578 35.25 7.42578C35.0221 7.42578 34.8138 7.3737 34.625 7.26953ZM39.5664 13.3047C39.1823 13.0703 38.8763 12.748 38.6484 12.3379C38.4271 11.9342 38.3164 11.472 38.3164 10.9512C38.3164 10.4303 38.4271 9.9681 38.6484 9.56445C38.8828 9.14128 39.1888 8.81576 39.5664 8.58789C39.957 8.35352 40.3997 8.23633 40.8945 8.23633C41.4349 8.23633 41.9004 8.36654 42.291 8.62695C42.6686 8.88086 42.9355 9.22266 43.0918 9.65234L42.3203 9.97461C42.1901 9.64909 42.0046 9.4082 41.7637 9.25195C41.5163 9.08919 41.2135 9.00781 40.8555 9.00781C40.556 9.00781 40.276 9.08919 40.0156 9.25195C39.7552 9.41471 39.5469 9.64258 39.3906 9.93555C39.2344 10.2285 39.1562 10.5671 39.1562 10.9512C39.1562 11.3288 39.2344 11.6641 39.3906 11.957C39.5469 12.25 39.7552 12.4779 40.0156 12.6406C40.2826 12.8099 40.5625 12.8945 40.8555 12.8945C41.207 12.8945 41.5163 12.8099 41.7832 12.6406C42.0436 12.4779 42.2389 12.2402 42.3691 11.9277L43.1211 12.25C42.9453 12.6667 42.6686 13.0052 42.291 13.2656C41.9134 13.526 41.4479 13.6562 40.8945 13.6562C40.3997 13.6562 39.957 13.5391 39.5664 13.3047ZM51.7539 7.66992H51.1191V13.5H50.3086V12.748H50.2695C50.1198 12.9954 49.8854 13.2103 49.5664 13.3926C49.2604 13.5684 48.9154 13.6562 48.5312 13.6562C48.056 13.6562 47.6393 13.5423 47.2812 13.3145C46.9167 13.0866 46.627 12.7643 46.4121 12.3477C46.1973 11.9375 46.0898 11.472 46.0898 10.9512C46.0898 10.4368 46.1973 9.97461 46.4121 9.56445C46.6335 9.14128 46.9232 8.81576 47.2812 8.58789C47.6523 8.35352 48.069 8.23633 48.5312 8.23633C48.9089 8.23633 49.2539 8.32747 49.5664 8.50977C49.8854 8.69857 50.1198 8.91667 50.2695 9.16406H50.3086L50.2695 8.48047V7.66992H48.7266V6.99609H50.2695V6.3418H51.1191V6.99609H51.7539V7.66992ZM49.4492 12.6504C49.7096 12.4941 49.918 12.2663 50.0742 11.9668C50.2305 11.6738 50.3086 11.3353 50.3086 10.9512C50.3086 10.5605 50.2305 10.2188 50.0742 9.92578C49.918 9.63932 49.7096 9.41471 49.4492 9.25195C49.1823 9.08919 48.9056 9.00781 48.6191 9.00781C48.3392 9.00781 48.0625 9.08919 47.7891 9.25195C47.5352 9.40169 47.3268 9.62956 47.1641 9.93555C47.0078 10.2285 46.9297 10.5671 46.9297 10.9512C46.9297 11.3353 47.0078 11.6738 47.1641 11.9668C47.3268 12.2728 47.5352 12.5007 47.7891 12.6504C48.0625 12.8132 48.3392 12.8945 48.6191 12.8945C48.9056 12.8945 49.1823 12.8132 49.4492 12.6504ZM52.877 7.46484C52.7142 7.46484 52.571 7.40299 52.4473 7.2793C52.3236 7.1556 52.2617 7.01237 52.2617 6.84961C52.2617 6.68034 52.3236 6.53385 52.4473 6.41016C52.5579 6.29948 52.7012 6.24414 52.877 6.24414C53.0527 6.24414 53.196 6.29948 53.3066 6.41016C53.4238 6.52734 53.4824 6.67383 53.4824 6.84961C53.4824 7.01888 53.4238 7.16211 53.3066 7.2793C53.1829 7.40299 53.0397 7.46484 52.877 7.46484ZM52.457 8.40234H53.3066V13.5H52.457V8.40234ZM52.877 15.4238C52.7337 15.4238 52.6068 15.3685 52.4961 15.2578C52.3854 15.1471 52.3301 15.0202 52.3301 14.877C52.3301 14.7207 52.3854 14.5938 52.4961 14.4961C52.6068 14.3984 52.7337 14.3496 52.877 14.3496C53.0332 14.3496 53.1602 14.3984 53.2578 14.4961C53.3555 14.5938 53.4043 14.7207 53.4043 14.877C53.4043 15.0267 53.3555 15.1536 53.2578 15.2578C53.1602 15.3685 53.0332 15.4238 52.877 15.4238ZM54.6348 8.40234H55.4355V9.1543H55.4844C55.6211 8.90039 55.8424 8.68555 56.1484 8.50977C56.4609 8.32747 56.7897 8.23633 57.1348 8.23633C57.7467 8.23633 58.2122 8.41536 58.5312 8.77344C58.8568 9.13802 59.0195 9.62305 59.0195 10.2285V13.5H58.1699V10.3555C58.1699 9.88672 58.056 9.54492 57.8281 9.33008C57.6068 9.11523 57.2975 9.00781 56.9004 9.00781C56.627 9.00781 56.3828 9.08594 56.168 9.24219C55.9401 9.41146 55.7708 9.61328 55.6602 9.84766C55.543 10.1016 55.4844 10.362 55.4844 10.6289V13.5H54.6348V8.40234ZM60.2402 6.3418H61.0898V8.45117L61.041 9.1543H61.0898C61.2201 8.90039 61.4414 8.68229 61.7539 8.5C62.0534 8.32422 62.3854 8.23633 62.75 8.23633C63.3685 8.23633 63.8405 8.41862 64.166 8.7832C64.4915 9.14779 64.6543 9.62956 64.6543 10.2285V13.5H63.8047V10.3555C63.8047 9.89974 63.6875 9.5612 63.4531 9.33984C63.2253 9.11849 62.9225 9.00781 62.5449 9.00781C62.291 9.00781 62.0469 9.08919 61.8125 9.25195C61.5911 9.4082 61.4154 9.61328 61.2852 9.86719C61.1549 10.1276 61.0898 10.3913 61.0898 10.6582V13.5H60.2402V6.3418Z"
        fill="#0050A6"
      />
    </svg>
  );
  const ButtonChooseDefault = () => (
    <svg
      width="103"
      height="20"
      viewBox="0 0 103 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect width="103" height="20" rx="4" fill="#EFF1F4" />
      <path
        d="M10.2656 13.168C9.71224 12.8555 9.26953 12.4062 8.9375 11.8203C8.61198 11.2474 8.44922 10.6126 8.44922 9.91602C8.44922 9.2194 8.61198 8.58464 8.9375 8.01172C9.26302 7.4388 9.70573 6.99284 10.2656 6.67383C10.8516 6.3418 11.4831 6.17578 12.1602 6.17578C12.681 6.17578 13.1693 6.27669 13.625 6.47852C14.0677 6.67383 14.4518 6.96354 14.7773 7.34766L14.1719 7.94336C13.8984 7.61784 13.599 7.37695 13.2734 7.2207C12.9479 7.06445 12.5768 6.98633 12.1602 6.98633C11.6458 6.98633 11.1706 7.11003 10.7344 7.35742C10.2982 7.60482 9.95312 7.94661 9.69922 8.38281C9.4388 8.83203 9.30859 9.3431 9.30859 9.91602C9.30859 10.4954 9.4388 11.0098 9.69922 11.459C9.95312 11.8952 10.2982 12.237 10.7344 12.4844C11.1576 12.7253 11.6328 12.8457 12.1602 12.8457C13.026 12.8457 13.7617 12.4909 14.3672 11.7812L14.9922 12.377C14.6732 12.7611 14.263 13.0736 13.7617 13.3145C13.2865 13.5423 12.7526 13.6562 12.1602 13.6562C11.4701 13.6562 10.8385 13.4935 10.2656 13.168ZM15.9395 6.3418H16.7891V8.45117L16.7402 9.1543H16.7891C16.9193 8.90039 17.1406 8.68229 17.4531 8.5C17.7526 8.32422 18.0846 8.23633 18.4492 8.23633C19.0677 8.23633 19.5397 8.41862 19.8652 8.7832C20.1908 9.14779 20.3535 9.62956 20.3535 10.2285V13.5H19.5039V10.3555C19.5039 9.89974 19.3867 9.5612 19.1523 9.33984C18.9245 9.11849 18.6217 9.00781 18.2441 9.00781C17.9902 9.00781 17.7461 9.08919 17.5117 9.25195C17.2904 9.4082 17.1146 9.61328 16.9844 9.86719C16.8542 10.1276 16.7891 10.3913 16.7891 10.6582V13.5H15.9395V6.3418ZM22.5703 13.3047C22.1732 13.0638 21.8607 12.735 21.6328 12.3184C21.4115 11.9147 21.3008 11.459 21.3008 10.9512C21.3008 10.4434 21.4115 9.98763 21.6328 9.58398C21.8607 9.16732 22.1732 8.83854 22.5703 8.59766C22.9674 8.35677 23.4167 8.23633 23.918 8.23633C24.4193 8.23633 24.8685 8.35677 25.2656 8.59766C25.6628 8.83854 25.9753 9.16732 26.2031 9.58398C26.4245 9.98763 26.5352 10.4434 26.5352 10.9512C26.5352 11.459 26.4245 11.9147 26.2031 12.3184C25.9753 12.735 25.6628 13.0638 25.2656 13.3047C24.8815 13.5391 24.4323 13.6562 23.918 13.6562C23.4036 13.6562 22.9544 13.5391 22.5703 13.3047ZM24.7969 12.6504C25.0573 12.5007 25.2721 12.276 25.4414 11.9766C25.6042 11.6901 25.6855 11.3483 25.6855 10.9512C25.6855 10.5475 25.6042 10.2025 25.4414 9.91602C25.2721 9.61654 25.0573 9.39193 24.7969 9.24219C24.5234 9.08594 24.2305 9.00781 23.918 9.00781C23.6055 9.00781 23.3125 9.08594 23.0391 9.24219C22.7721 9.39844 22.554 9.62305 22.3848 9.91602C22.222 10.2025 22.1406 10.5475 22.1406 10.9512C22.1406 11.3483 22.222 11.6901 22.3848 11.9766C22.554 12.2695 22.7721 12.4941 23.0391 12.6504C23.3255 12.8132 23.6185 12.8945 23.918 12.8945C24.2174 12.8945 24.5104 12.8132 24.7969 12.6504ZM23.5371 15.2578C23.4329 15.1536 23.3809 15.0267 23.3809 14.877C23.3809 14.7207 23.4329 14.5938 23.5371 14.4961C23.6413 14.3984 23.7682 14.3496 23.918 14.3496C24.0742 14.3496 24.2012 14.3984 24.2988 14.4961C24.3965 14.5938 24.4453 14.7207 24.4453 14.877C24.4453 15.0267 24.3965 15.1536 24.2988 15.2578C24.2012 15.3685 24.0742 15.4238 23.918 15.4238C23.7747 15.4238 23.6478 15.3685 23.5371 15.2578ZM27.5312 8.40234H28.332V9.1543H28.3809C28.5176 8.90039 28.7389 8.68555 29.0449 8.50977C29.3574 8.32747 29.6862 8.23633 30.0312 8.23633C30.6432 8.23633 31.1087 8.41536 31.4277 8.77344C31.7533 9.13802 31.916 9.62305 31.916 10.2285V13.5H31.0664V10.3555C31.0664 9.88672 30.9525 9.54492 30.7246 9.33008C30.5033 9.11523 30.194 9.00781 29.7969 9.00781C29.5234 9.00781 29.2793 9.08594 29.0645 9.24219C28.8366 9.41146 28.6673 9.61328 28.5566 9.84766C28.4395 10.1016 28.3809 10.362 28.3809 10.6289V13.5H27.5312V8.40234ZM35.4512 6.3418H36.3008V13.5H35.4512V6.3418ZM38.1367 13.4414C37.8372 13.2917 37.6094 13.0898 37.4531 12.8359C37.2969 12.582 37.2188 12.2891 37.2188 11.957C37.2188 11.4167 37.4206 10.9967 37.8242 10.6973C38.2409 10.3913 38.7552 10.2383 39.3672 10.2383C39.6862 10.2383 39.9727 10.2708 40.2266 10.3359C40.487 10.401 40.6855 10.4792 40.8223 10.5703V10.2578C40.8223 9.88672 40.6921 9.58398 40.4316 9.34961C40.1712 9.11523 39.8327 8.99805 39.416 8.99805C39.1361 8.99805 38.8757 9.0599 38.6348 9.18359C38.3809 9.3138 38.1888 9.48633 38.0586 9.70117L37.4141 9.22266C37.6094 8.92318 37.8861 8.68229 38.2441 8.5C38.5957 8.32422 38.9863 8.23633 39.416 8.23633C40.1061 8.23633 40.6497 8.41862 41.0469 8.7832C41.4375 9.14128 41.6328 9.63607 41.6328 10.2676V13.5H40.8223V12.7676H40.7832C40.6335 13.0215 40.4154 13.2331 40.1289 13.4023C39.849 13.5716 39.5169 13.6562 39.1328 13.6562C38.7552 13.6562 38.4232 13.5846 38.1367 13.4414ZM40.0215 12.6895C40.2689 12.5397 40.4642 12.3444 40.6074 12.1035C40.7507 11.8626 40.8223 11.5924 40.8223 11.293C40.666 11.1888 40.4707 11.1009 40.2363 11.0293C40.015 10.9642 39.7676 10.9316 39.4941 10.9316C39.0254 10.9316 38.6738 11.0293 38.4395 11.2246C38.2051 11.4199 38.0879 11.6673 38.0879 11.9668C38.0879 12.2467 38.1953 12.4746 38.4102 12.6504C38.625 12.8262 38.8952 12.9141 39.2207 12.9141C39.5072 12.9141 39.7741 12.8392 40.0215 12.6895ZM38.4004 6.13672H39.3281L39.8457 7.40625H39.0938L38.4004 6.13672ZM42.8145 8.40234H43.6152V9.1543H43.6641C43.8073 8.89388 44.0254 8.67578 44.3184 8.5C44.6113 8.32422 44.9206 8.23633 45.2461 8.23633C45.6107 8.23633 45.9362 8.32747 46.2227 8.50977C46.5026 8.69206 46.7012 8.93294 46.8184 9.23242C46.9941 8.93294 47.2318 8.69206 47.5312 8.50977C47.8372 8.32747 48.1823 8.23633 48.5664 8.23633C49.1589 8.23633 49.6016 8.41536 49.8945 8.77344C50.194 9.14453 50.3438 9.62956 50.3438 10.2285V13.5H49.5039V10.3555C49.5039 9.88672 49.4062 9.54492 49.2109 9.33008C49.0156 9.11523 48.7292 9.00781 48.3516 9.00781C48.0977 9.00781 47.8665 9.08268 47.6582 9.23242C47.4499 9.38216 47.2871 9.57747 47.1699 9.81836C47.0592 10.0462 47.0039 10.3132 47.0039 10.6191V13.5H46.1543V10.3652C46.1543 9.88997 46.0566 9.54492 45.8613 9.33008C45.666 9.11523 45.3828 9.00781 45.0117 9.00781C44.7578 9.00781 44.5267 9.08268 44.3184 9.23242C44.11 9.38216 43.9473 9.58398 43.8301 9.83789C43.7194 10.0788 43.6641 10.3457 43.6641 10.6387V13.5H42.8145V8.40234ZM53.8887 8.40234H54.6895V9.1543H54.7383C54.8815 8.89388 55.0996 8.67578 55.3926 8.5C55.6855 8.32422 55.9948 8.23633 56.3203 8.23633C56.6849 8.23633 57.0104 8.32747 57.2969 8.50977C57.5768 8.69206 57.7754 8.93294 57.8926 9.23242C58.0684 8.93294 58.306 8.69206 58.6055 8.50977C58.9115 8.32747 59.2565 8.23633 59.6406 8.23633C60.2331 8.23633 60.6758 8.41536 60.9688 8.77344C61.2682 9.14453 61.418 9.62956 61.418 10.2285V13.5H60.5781V10.3555C60.5781 9.88672 60.4805 9.54492 60.2852 9.33008C60.0898 9.11523 59.8034 9.00781 59.4258 9.00781C59.1719 9.00781 58.9408 9.08268 58.7324 9.23242C58.5241 9.38216 58.3613 9.57747 58.2441 9.81836C58.1335 10.0462 58.0781 10.3132 58.0781 10.6191V13.5H57.2285V10.3652C57.2285 9.88997 57.1309 9.54492 56.9355 9.33008C56.7402 9.11523 56.457 9.00781 56.0859 9.00781C55.832 9.00781 55.6009 9.08268 55.3926 9.23242C55.1842 9.38216 55.0215 9.58398 54.9043 9.83789C54.7936 10.0788 54.7383 10.3457 54.7383 10.6387V13.5H53.8887V8.40234ZM63.2734 13.4414C62.974 13.2917 62.7461 13.0898 62.5898 12.8359C62.4336 12.582 62.3555 12.2891 62.3555 11.957C62.3555 11.4167 62.5573 10.9967 62.9609 10.6973C63.3776 10.3913 63.8919 10.2383 64.5039 10.2383C64.8229 10.2383 65.1094 10.2708 65.3633 10.3359C65.6237 10.401 65.8223 10.4792 65.959 10.5703V10.2578C65.959 9.88672 65.8288 9.58398 65.5684 9.34961C65.3079 9.11523 64.9694 8.99805 64.5527 8.99805C64.2728 8.99805 64.0124 9.0599 63.7715 9.18359C63.5176 9.3138 63.3255 9.48633 63.1953 9.70117L62.5508 9.22266C62.7461 8.92318 63.0228 8.68229 63.3809 8.5C63.7324 8.32422 64.123 8.23633 64.5527 8.23633C65.2428 8.23633 65.7865 8.41862 66.1836 8.7832C66.5742 9.14128 66.7695 9.63607 66.7695 10.2676V13.5H65.959V12.7676H65.9199C65.7702 13.0215 65.5521 13.2331 65.2656 13.4023C64.9857 13.5716 64.6536 13.6562 64.2695 13.6562C63.8919 13.6562 63.5599 13.5846 63.2734 13.4414ZM65.1582 12.6895C65.4056 12.5397 65.6009 12.3444 65.7441 12.1035C65.8874 11.8626 65.959 11.5924 65.959 11.293C65.8027 11.1888 65.6074 11.1009 65.373 11.0293C65.1517 10.9642 64.9043 10.9316 64.6309 10.9316C64.1621 10.9316 63.8105 11.0293 63.5762 11.2246C63.3418 11.4199 63.2246 11.6673 63.2246 11.9668C63.2246 12.2467 63.332 12.4746 63.5469 12.6504C63.7617 12.8262 64.0319 12.9141 64.3574 12.9141C64.6439 12.9141 64.9108 12.8392 65.1582 12.6895ZM64.2305 15.2578C64.1263 15.1536 64.0742 15.0267 64.0742 14.877C64.0742 14.7207 64.1263 14.5938 64.2305 14.4961C64.3411 14.3984 64.4681 14.3496 64.6113 14.3496C64.7676 14.3496 64.8945 14.3984 64.9922 14.4961C65.0964 14.6003 65.1484 14.7272 65.1484 14.877C65.1484 15.0137 65.0964 15.1406 64.9922 15.2578C64.8945 15.3685 64.7676 15.4238 64.6113 15.4238C64.4681 15.4238 64.3411 15.3685 64.2305 15.2578ZM63.9863 7.26953C63.804 7.17188 63.6478 7.01888 63.5176 6.81055C63.3939 6.61523 63.332 6.40365 63.332 6.17578H64.0254C64.0254 6.35156 64.0775 6.49479 64.1816 6.60547C64.2923 6.72917 64.4355 6.79102 64.6113 6.79102C64.7741 6.79102 64.9108 6.72917 65.0215 6.60547C65.1322 6.48177 65.1875 6.33854 65.1875 6.17578H65.8613C65.8613 6.41016 65.8027 6.62174 65.6855 6.81055C65.5553 7.01888 65.4023 7.17188 65.2266 7.26953C65.0378 7.3737 64.8327 7.42578 64.6113 7.42578C64.3835 7.42578 64.1751 7.3737 63.9863 7.26953ZM68.9277 13.3047C68.5436 13.0703 68.2376 12.748 68.0098 12.3379C67.7884 11.9342 67.6777 11.472 67.6777 10.9512C67.6777 10.4303 67.7884 9.9681 68.0098 9.56445C68.2441 9.14128 68.5501 8.81576 68.9277 8.58789C69.3184 8.35352 69.7611 8.23633 70.2559 8.23633C70.7962 8.23633 71.2617 8.36654 71.6523 8.62695C72.0299 8.88086 72.2969 9.22266 72.4531 9.65234L71.6816 9.97461C71.5514 9.64909 71.3659 9.4082 71.125 9.25195C70.8776 9.08919 70.5749 9.00781 70.2168 9.00781C69.9173 9.00781 69.6374 9.08919 69.377 9.25195C69.1165 9.41471 68.9082 9.64258 68.752 9.93555C68.5957 10.2285 68.5176 10.5671 68.5176 10.9512C68.5176 11.3288 68.5957 11.6641 68.752 11.957C68.9082 12.25 69.1165 12.4779 69.377 12.6406C69.6439 12.8099 69.9238 12.8945 70.2168 12.8945C70.5684 12.8945 70.8776 12.8099 71.1445 12.6406C71.4049 12.4779 71.6003 12.2402 71.7305 11.9277L72.4824 12.25C72.3066 12.6667 72.0299 13.0052 71.6523 13.2656C71.2747 13.526 70.8092 13.6562 70.2559 13.6562C69.7611 13.6562 69.3184 13.5391 68.9277 13.3047ZM81.1152 7.66992H80.4805V13.5H79.6699V12.748H79.6309C79.4811 12.9954 79.2467 13.2103 78.9277 13.3926C78.6217 13.5684 78.2767 13.6562 77.8926 13.6562C77.4173 13.6562 77.0007 13.5423 76.6426 13.3145C76.278 13.0866 75.9883 12.7643 75.7734 12.3477C75.5586 11.9375 75.4512 11.472 75.4512 10.9512C75.4512 10.4368 75.5586 9.97461 75.7734 9.56445C75.9948 9.14128 76.2845 8.81576 76.6426 8.58789C77.0137 8.35352 77.4303 8.23633 77.8926 8.23633C78.2702 8.23633 78.6152 8.32747 78.9277 8.50977C79.2467 8.69857 79.4811 8.91667 79.6309 9.16406H79.6699L79.6309 8.48047V7.66992H78.0879V6.99609H79.6309V6.3418H80.4805V6.99609H81.1152V7.66992ZM78.8105 12.6504C79.071 12.4941 79.2793 12.2663 79.4355 11.9668C79.5918 11.6738 79.6699 11.3353 79.6699 10.9512C79.6699 10.5605 79.5918 10.2188 79.4355 9.92578C79.2793 9.63932 79.071 9.41471 78.8105 9.25195C78.5436 9.08919 78.2669 9.00781 77.9805 9.00781C77.7005 9.00781 77.4238 9.08919 77.1504 9.25195C76.8965 9.40169 76.6882 9.62956 76.5254 9.93555C76.3691 10.2285 76.291 10.5671 76.291 10.9512C76.291 11.3353 76.3691 11.6738 76.5254 11.9668C76.6882 12.2728 76.8965 12.5007 77.1504 12.6504C77.4238 12.8132 77.7005 12.8945 77.9805 12.8945C78.2669 12.8945 78.5436 12.8132 78.8105 12.6504ZM82.2383 7.46484C82.0755 7.46484 81.9323 7.40299 81.8086 7.2793C81.6849 7.1556 81.623 7.01237 81.623 6.84961C81.623 6.68034 81.6849 6.53385 81.8086 6.41016C81.9193 6.29948 82.0625 6.24414 82.2383 6.24414C82.4141 6.24414 82.5573 6.29948 82.668 6.41016C82.7852 6.52734 82.8438 6.67383 82.8438 6.84961C82.8438 7.01888 82.7852 7.16211 82.668 7.2793C82.5443 7.40299 82.401 7.46484 82.2383 7.46484ZM81.8184 8.40234H82.668V13.5H81.8184V8.40234ZM82.2383 15.4238C82.0951 15.4238 81.9681 15.3685 81.8574 15.2578C81.7467 15.1471 81.6914 15.0202 81.6914 14.877C81.6914 14.7207 81.7467 14.5938 81.8574 14.4961C81.9681 14.3984 82.0951 14.3496 82.2383 14.3496C82.3945 14.3496 82.5215 14.3984 82.6191 14.4961C82.7168 14.5938 82.7656 14.7207 82.7656 14.877C82.7656 15.0267 82.7168 15.1536 82.6191 15.2578C82.5215 15.3685 82.3945 15.4238 82.2383 15.4238ZM83.9961 8.40234H84.7969V9.1543H84.8457C84.9824 8.90039 85.2038 8.68555 85.5098 8.50977C85.8223 8.32747 86.151 8.23633 86.4961 8.23633C87.1081 8.23633 87.5736 8.41536 87.8926 8.77344C88.2181 9.13802 88.3809 9.62305 88.3809 10.2285V13.5H87.5312V10.3555C87.5312 9.88672 87.4173 9.54492 87.1895 9.33008C86.9681 9.11523 86.6589 9.00781 86.2617 9.00781C85.9883 9.00781 85.7441 9.08594 85.5293 9.24219C85.3014 9.41146 85.1322 9.61328 85.0215 9.84766C84.9043 10.1016 84.8457 10.362 84.8457 10.6289V13.5H83.9961V8.40234ZM89.6016 6.3418H90.4512V8.45117L90.4023 9.1543H90.4512C90.5814 8.90039 90.8027 8.68229 91.1152 8.5C91.4147 8.32422 91.7467 8.23633 92.1113 8.23633C92.7298 8.23633 93.2018 8.41862 93.5273 8.7832C93.8529 9.14779 94.0156 9.62956 94.0156 10.2285V13.5H93.166V10.3555C93.166 9.89974 93.0488 9.5612 92.8145 9.33984C92.5866 9.11849 92.2839 9.00781 91.9062 9.00781C91.6523 9.00781 91.4082 9.08919 91.1738 9.25195C90.9525 9.4082 90.7767 9.61328 90.6465 9.86719C90.5163 10.1276 90.4512 10.3913 90.4512 10.6582V13.5H89.6016V6.3418Z"
        fill="#A0ACBE"
      />
    </svg>
  );
  //đóng mở Modal tạo mới địa chỉ
  const [active, setActive] = useState(true);
  const toggleModal = useCallback(() => setActive((active) => !active), []);
  const activator = <Button onClick={toggleModal}>Open</Button>;
  //đóng mở Modal Edit
  const [activeE, setActiveE] = useState(true);
  const toggleModalE = useCallback(()=> setActiveE((activeE) => !activeE), []);
  const activatorE = <Button onClick={toggleModalE}>OpenE</Button>

  let [fullName, setFullName] = useState('');
  let [fullNameEdit,setFullNameEdit] = useState("");
  let [phone, setPhone] = useState('');
  let [email, setEmail] = useState('');
  let [add, setAdd] = useState('');
  let [addType, setAddType] = useState('');
  let [statusAddress, setStatusAddress] = useState('');
  // let handleCreateNewAdd=()=>{
  //   let addNew={
  //       fullName: fullName,
  //       phone: phone,
  //       email: email,
  //       address: add,
  //       addressType: addType,
  //       statusAddress: isDefault ? 'mặc định' : '',
  //   }
  //   setAddresses([...addresses, addNew])
  // }
  const findMaxId = (ids: Array<number>)=>{
let max = ids[0];
for(let i=1;i<ids.length;i++){
  if(ids[i]>max){
    max=ids[i]
  }
}return max;
  }

  let handleCreateNewAdd = () => {
    const ids = addresses.map((a)=>a.id);
    const id = findMaxId(ids) +1;

    let addNew = {
      // id: 10, tý nữa xử lý sao cho nó tự tăng id lên đọc hic 
  // h đơn giản nhất là tìm cái id lớn nhất, mỗi lâng thêm mới là lấy cái id đó + 1
  //;e ko bt viết giờ toàn tra anh ạ ;:( logic c)
 id: id,
      //alo a còn đó ko anh, e xin lại luồng làm với ạhoir từ đâu dạ từ nút Edit đi anh
      fullName: fullName,
      phone: phone,
      email: email,
      address: add,
      addressType: addType,
      statusAddress: '',
    };

    // Kiểm tra xem checkbox "Chọn làm mặc định" có được chọn không
    if (isDefault) {
      // Nếu có, đặt địa chỉ mới này làm mặc định
      setDefaultAddressIndex(addresses.length);
    }

    // Thêm địa chỉ mới vào danh sách
    setAddresses([...addresses, addNew]);
  };
  //này là state mà, nó có mãi là thằng ânyf đâu, trước khi hiện Modal thì nó đã thành cái thằng mình nhấn nút edit rồi
  let [userForEdit, setUserForEdit] = useState( {
    id:1,
    fullName: 'Nguyễn Tuấn Minh',
    phone: '0943123123',
    email: '',
    address: 'Tầng 66, toà nhà 25T, Đường Hoàng Đạo Thuý, Cầu Giấy, Hà Nội, Hà Nội',
    addressType: 'OFFICE',
    statusAddress: 'mặc định',
  });
  useEffect(()=>{
    // thay đổi fullName dựa theo user cần edit từ từ sếp đến đonaj này sao mình useE nó lên ạ?
    //mình có fake data rồi sao cần thêm 1 đoạn trên hả a, tránh lỗi thôi, lúc đầu nó là {}  thì ko gọi fulName các thứ đc
    //có 1 đoạn trung gian ở đây e chưa hiểu sếp ạ: mình có fullName, userEdit, sao lại thêm FUllName edit, a tưởng fullName kia là dùng bên form tạo mới à đúng r anh ạ; mình ko dùng chung đc hả a, m thích thì dùng chung, nhưng tạo mới thì nó ban đầu là ko có gì chứ tự dưng hiện cái tên ngta lên à nó cho hiện đó a xong mình đi sửa giống ngày trc, chả có ngày trước nào dùng chung cả à đúng là như thế anh ạ
    //ở đoạn này e còn cái ko hiểu là tại sao mình setFullNameEdit kia lại đưa thg userForEdit.fullName mà nó cx hiểu ở đây có mỗi Nguyễn Tuấn minh fullName: 'Nguyễn Tuấn Minh', khi mình tạo mới lại có thể sửa nó được??
    setFullNameEdit(userForEdit.fullName);
   },[userForEdit])
   const handleFinishUpdate = ()=>{
    //đây là user sau khi sửa tên
    const updateUser = {...userForEdit,fullName: fullNameEdit}
    //h thay thế vào list cũ, đọc hàm map, hiểu dược dòng dưới là ok
    setAddresses(addresses.map((a)=> a.id===updateUser.id?updateUser:a));
    //chạy hàm đóng Modal lại  ok
   }
  //tạm thế này, tí nữa tạo cáo class định nghĩa user

  //giờ a bảo làm cho nó liên quan đến nhau? giờ sao ta
  //đoạn đấy nó cx khó hiểu nữa tại sao handleEditAdd=(user: any) thêm address??
  // 1 hàm có tham số đầu vào thôi mà, hàm này e nhận ông user nào thì  e setUsserForEdit bằng ông đó
  let handleEditAdd=(user: any)=>{
    // xác định user cần edit
    setUserForEdit(user)
    //mở modal lên
    toggleModalE();
  }
  const [city, setCity] = useState('');
  const [district, setDistrict] = useState('');
  const [ward, setWard] = useState('');
  const handleCityChange = (event: any) => {
    setCity(event.target.value);
    // Reset district and ward when city changes
    setDistrict('');
    setWard('');
  };
  const handleDistrictChange = (event: any) => {
    setDistrict(event.target.value);
    // Reset ward when district changes
    setWard('');
  };

  return (
    <div className="Polaris-Custom">
      <Page
        primaryAction={
          selected == 1 ? (
            <div style={{ marginBottom: '12px' }} onClick={toggleModal}>
              <ButtonCreateNewAdd />
            </div>
          ) : null
        }
      >
        <Layout>
          <Layout.Section>
            <LegacyCard>
              <LegacyStack alignment={'center'} distribution={'equalSpacing'}>
                <LegacyStack.Item>
                  <div className="Tabs_Custom">
                    <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} />
                  </div>
                </LegacyStack.Item>
              </LegacyStack>
              {selected == 1 ? (
                <LegacyCard.Section>
                  <div className="grid-address">
                    {addresses.map((addresses: any, index: number) => (
                      <div className="grid-item-address">
                        <div
                          className="address1"
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            textAlign: 'left',
                            gap: '12px',
                          }}
                        >
                          {/* code ở đây */}
                          <p className="addressFullName">{addresses.fullName}</p>
                          <p className="addressFullName">{addresses.phone}</p>
                          <p className="addressAdd">{addresses.address}</p>
                        </div>
                        <div
                          className="address2"
                          style={{
                            display: 'flex',
                            flexDirection: 'column',
                            alignContent: 'flex-end',
                          }}
                        >
                          <div style={{ display: 'flex', gap: '10px' }}>
                            <div onClick={()=>{
                              handleEditAdd(addresses);

                              //cái này có nhấn chơi đâu
                            }} >
                              <IconEditAddress />
                            </div>
                            <div
                              style={{ cursor: 'pointer' }}
                              onClick={() => handleDeleteAddress(index)}
                            >
                              <IconTrashAddress />
                            </div>
                          </div>

                          <div style={{ marginTop: '36px' }}>
                            {index === defaultAddressIndex ? (
                              <ButtonStatusDefault />
                            ) : (
                              <div onClick={() => setDefaultAddressIndex(index)}>
                                <ButtonChooseDefault />
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </LegacyCard.Section>
              ) : null}

              {/* Modal Create New Address */}
              <div style={{ height: '500px' }}>
                <Frame>
                  <Modal
                    activator={activator}
                    open={active}
                    onClose={toggleModal}
                    title="Tạo địa chỉ mới"
                    // primaryAction={{
                    //   content: 'Close',
                    //   onAction: toggleModal,
                    // }}
                  >
                    <Modal.Section>
                      <LegacyStack vertical>
                        <LegacyStack.Item>
                          <TextContainer>
                            <div>
                              {/* Họ và tên */}
                              <div>
                                <label htmlFor="">Họ và tên</label>
                                <input
                                  type="text"
                                  placeholder="tên"
                                  onChange={(event) => {
                                    setFullName(event.target.value);
                                  }}
                                />
                              </div>

                              {/* Điện thoại */}
                              <div>
                                <label htmlFor="">Điện thoại</label>
                                <input
                                  type="text"
                                  placeholder="số điện thoại"
                                  onChange={(event) => {
                                    setPhone(event.target.value);
                                  }}
                                />
                              </div>

                              {/* Email */}
                              <div>
                                <label htmlFor="">Email</label>
                                <input
                                  type="text"
                                  placeholder="email"
                                  onChange={(event) => {
                                    setEmail(event.target.value);
                                  }}
                                />
                              </div>

                              <div>
      {/* Thành phố */}
      <div>
        <label htmlFor='city'>Thành phố</label>
        <select id='city' value={city} onChange={handleCityChange}>
          <option value=''>Chọn thành phố</option>
          <option value='Hanoi'>Hà Nội</option>
          <option value='HCMC'>Hồ Chí Minh</option>
        </select>
      </div>

      {/* Quận */}
      <div>
        <label htmlFor='district'>Quận</label>
        <select id='district' value={district} onChange={handleDistrictChange}>
          <option value=''>Chọn quận</option>
          {city === 'Hanoi' && (
            <>
              <option value='NamTuLiem'>Nam Từ Liêm</option>
              <option value='BacTuLiem'>Bắc Từ Liêm</option>
            </>
          )}
          {city === 'HCMC' && (
            <>
              <option value='ThuDuc'>Thủ Đức</option>
              <option value='TanPhu'>Tân Phú</option>
            </>
          )}
        </select>
      </div>

      {/* Phường/Xã */}
      <div>
        <label htmlFor='ward'>Phường/Xã</label>
        <select id='ward' value={ward} onChange={(event) => setWard(event.target.value)}>
          <option value=''>Chọn phường/xã</option>
          {/* Populate wards based on selected district */}
          {district === 'NamTuLiem' && (
            <>
              <option value='DaiMo'>Đại Mỗ</option>
              <option value='TayMo'>Tây Mỗ</option>
            </>
          )}
          {district === 'BacTuLiem' && (
            <>
              <option value='CoNhue'>Cổ Nhuế</option>
              <option value='TayTuu'>Tây Tựu</option>
            </>
          )}
          {district === 'ThuDuc' && (
            <>
              <option value='AnKhanh'>An Khánh</option>
              <option value='AnPhu'>An Phú</option>
            </>
          )}
          {district === 'TanPhu' && (
            <>
              <option value='Phuong1'>Phường 1</option>
              <option value='Phuong2'>Phường 2</option>
            </>
          )}
        </select>
      </div>
    </div>


                              {/* Địa Điểm chính xác */}
                              <div>
                                <label htmlFor="">Địa chỉ chính xác</label>
                                <input
                                  type="text"
                                  placeholder="email"
                                  onChange={(event) => {
                                    setAdd(event.target.value);
                                  }}
                                />
                              </div>

                              {/* Thanh chọn Radio */}
                              <div>
                                <label htmlFor="">Loại địa chỉ</label>
                                <div>
                                  <input type="radio" id="home" name="addressType" value="home" />
                                  <label htmlFor="home">HOME</label>
                                </div>
                                <div>
                                  <input
                                    type="radio"
                                    id="office"
                                    name="addressType"
                                    value="office"
                                  />
                                  <label htmlFor="office">OFFICE</label>
                                </div>
                              </div>

                              <div>
                                <label htmlFor="defaultAddress">Chọn làm mặc định</label>
                                <input
                                  type="checkbox"
                                  id="defaultAddress"
                                  checked={isDefault}
                                  onChange={() => setIsDefault(!isDefault)}
                                />
                              </div>

                              {/* Nút xử lý */}
                              <Button onClick={handleCreateNewAdd}>Create</Button>
                            </div>
                          </TextContainer>
                        </LegacyStack.Item>
                      </LegacyStack>
                    </Modal.Section>
                  </Modal>
                </Frame>
              </div>

              <Frame>
        <Modal
          activator={activatorE}
          open={activeE}
          onClose={toggleModalE}
          title="Sửa địa chỉ mới"
          primaryAction={{
            content: 'Close',
            onAction: toggleModalE,
          }}
        >
          <Modal.Section>
            <LegacyStack vertical>
              <LegacyStack.Item>
                <TextContainer>
                <div>
                {/* Họ và tên */}
                <div>
                    <label htmlFor="">Họ và tên</label>
                    <input type="text" placeholder='tên' value={fullNameEdit}
                     onChange={(event) => {
                        setFullNameEdit(event.target.value)
                      }}
          />
          {/*  */}
                </div>
                {/* Nút xử lý  */} 
                    <Button onClick={handleFinishUpdate} >LƯU CHỈNH SỬA</Button>
            </div>
                </TextContainer>
              </LegacyStack.Item>
            </LegacyStack>
          </Modal.Section>
        </Modal>
      </Frame>
            </LegacyCard>
          </Layout.Section>
        </Layout>
      </Page>
    </div>
  );
}

export default DemoCreateNewAddressLastest;
